import requests

resp = requests.get(url="http://www.baidu.com")

print(resp.text)

import unittest


def add(x, y):
    return x + y

class TestAdd(unittest.TestCase):
    def setUp(self) -> None:
        print("---setUp---")

    def tearDown(self) -> None:
        print("---tearDown---")

    @classmethod
    def setUpClass(cls) -> None:
        print("===setUpClass===")

    @classmethod
    def tearDownClass(cls) -> None:
        print("===tearDownClass===")

    def test01_add(self):
        print("测试方法1")
        ret = add(10,20)
        self.assertEqual(30,ret)

import unittest
import requests

# 定义测试类
class TestIhrmLogin(unittest.TestCase):
    # 添加测试方法-登录成功
    def test01_login_ok(self):
        # 发送 post 登录请求，指定 url、请求头、请求体，获取响应结果
        resp = requests.post(url="http://ihrm-test.itheima.net/api/sys/login",
                             json={"mobile": "13800000002", "password": "123456"})
        # 打印响应结果
        print(resp.json())

        # 断言- 响应状态码为 200
        self.assertEqual(200, resp.status_code)
        # 断言 success 的值为 true
        self.assertEqual(True, resp.json().get("success"))
        # 断言 code 的值为 10000
        self.assertEqual(10000, resp.json().get("code"))
        # 断言 message 的值为 操作成功！
        self.assertIn("操作成功", resp.json().get("message"))

    # 添加测试方法-手机号不存在
    def test02_tel_not_exists(self):
        # 发送 post 登录请求，指定 url、请求头、请求体，获取响应结果
        resp = requests.post(url="http://ihrm-test.itheima.net/api/sys/login",
                             json={"mobile": "13808437002", "password": "123456"})
        # 打印响应结果
        print(resp.json())

        # 断言- 响应状态码为 200
        self.assertEqual(200, resp.status_code)
        # 断言 success 的值为 true
        self.assertEqual(False, resp.json().get("success"))
        # 断言 code 的值为 10000
        self.assertEqual(20001, resp.json().get("code"))
        # 断言 message 的值为 操作成功！
        self.assertIn("用户名或密码错误", resp.json().get("message"))

    # 添加测试方法-密码错误
    def test03_pwd_err(self):
        # 发送 post 登录请求，指定 url、请求头、请求体，获取响应结果
        resp = requests.post(url="http://ihrm-test.itheima.net/api/sys/login",
                             json={"mobile": "13800000002", "password": "123456789"})
        # 打印响应结果
        print(resp.json())

        # 断言- 响应状态码为 200
        self.assertEqual(200, resp.status_code)
        # 断言 success 的值为 true
        self.assertEqual(False, resp.json().get("success"))
        # 断言 code 的值为 10000
        self.assertEqual(20001, resp.json().get("code"))
        # 断言 message 的值为 操作成功！
        self.assertIn("用户名或密码错误", resp.json().get("message"))

import unittest
from unittest import runner

from htmltestreport import HTMLTestReport

from day05.py10_unittest_demo import TestAdd

suite = unittest.TestSuite()

suite.addTest(unittest.makeSuite(TestAdd))

runner = HTMLTestReport("123.html")

runner.run(suite)

import pymysql

conn = pymysql.connect(host="211.103.136.244", port=7061, user="student",
                       password="iHRM_student_2021", database="test_db", charset="utf8")
cursor = conn.cursor()
cursor.execute("select version()")
res = cursor.fetchone()
cursor.close()
conn.close()


import pymysql

# 封装数据库工具类
class DBUtil(object):
    # 添加类属性
    conn = None

    @classmethod
    def __get_conn(cls):
        # 判断 conn 是否为空，如果是，再创建
        if cls.conn is None:
            cls.conn = pymysql.connect(host="211.103.136.244", port=7061, user="student",
                                       password="iHRM_student_2021", database="test_db", charset="utf8")
        # 返回 非空连接
        return cls.conn

    @classmethod
    def __close_conn(cls):
        # 判断，conn 不为空，需要关闭。
        if cls.conn is not None:
            cls.conn.close()
            cls.conn = None

    # 常用方法：查询一条
    @classmethod
    def select_one(cls, sql):
        cursor = None
        res = None
        try:
            # 获取连接
            cls.conn = cls.__get_conn()

            # 获取游标
            cursor = cls.conn.cursor()

            # 执行 查询语句
            cursor.execute(sql)

            # 提取一条结果
            res = cursor.fetchone()

        except Exception as err:
            print("查询sql错误：", str(err))
        finally:
            # 关闭游标
            cursor.close()

            # 关闭连接
            cls.__close_conn()

            # 将查询sql执行的 结果，返回
            return res

    # 常用方法：增删改
    @classmethod
    def uid_db(cls, sql):
        cursor = None
        try:
            # 获取连接
            cls.conn = cls.__get_conn()

            # 获取游标
            cursor = cls.conn.cursor()

            # 执行 uid 语句
            cursor.execute(sql)
            print("影响的行数：", cls.conn.affected_rows())

            # 提交事务
            cls.conn.commit()

        except Exception as err:
            # 回滚事务
            cls.conn.rollback()
            print("增删改 SQL 执行失败：", str(err))

        finally:
            # 关闭游标
            cursor.close()
            # 关闭连接
            cls.__close_conn()


if __name__ == '__main__':
    res = DBUtil.select_one("select * from t_book;")
    print("查询结果为：", res)

    DBUtil.uid_db("update t_book set is_delete = 1 where id = 1111;")

class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode cur = head;
        ListNode temp = head.next;
        cur.next = null;
        while (temp != null) {
            ListNode t = temp.next;
            temp.next = cur;
            cur = temp;
            temp = t;
        }
        return cur;
    }
}

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<Integer>();
        dfs(ans,root);
        return ans;
    }

    public static void dfs(List<Integer> ans,TreeNode root) {
        TreeNode cur = root;
        if (root == null) {
            return;
        }
        dfs(ans,root.left);
        ans.add(root.val);
        dfs(ans,root.right);
    }
}
class Solution {

    public static int ans;

    public static int diameterOfBinaryTree(TreeNode root) {
        ans = 0;
        dfs(root);
        return ans;
    }

    public static int dfs(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int leftMax = dfs(root.left);
        int rightMax = dfs(root.right);
        int max = Math.max(leftMax,rightMax);
        ans = Math.max(ans,leftMax + rightMax);

        return max+1; 
    }
}
