@Component
public class LoadBalancerFilter implements GlobalFilter {
    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        // 得到 request、response 对象
        ServerHttpRequest request = exchange.getRequest();
        ServerHttpResponse response = exchange.getResponse();
        // 判断灰度标签
        if (request.getQueryParams().getFirst(GlobalVariable.GRAY_TAGE) != null) {
            // 设置灰度标识
            response.getHeaders().set(GlobalVariable.GRAY_TAGE,
                    "true");
        }
        // 此步骤正常，执行下一步
        return chain.filter(exchange);
    }
}
public class GlobalVariable {
    public static final String GRAY_TAGE = "gray-tag";
}
    @Transactional
    @RequestMapping("/add")
    public AjaxResult add(ArticleVO articleVO,
                          @RequestHeader(value = "uid", required = false) Long uid) {
        // 1.非空效验
        if (articleVO == null || !StringUtils.hasLength(articleVO.getTitle()) ||
                !StringUtils.hasLength(articleVO.getContent()) ||
                articleVO.getCid() <= 0 || uid == null || uid <= 0) {
            return AjaxResult.fail(-1, "非法参数！");
        }
        articleVO.setUid(uid);
        // 2.文章持久化
        boolean result = articleService.save(articleVO);
        if (result) {
            ArticleCategory articleCategory = new ArticleCategory();
            articleCategory.setAid(articleVO.getAid());
            articleCategory.setCid(articleVO.getCid());
            // 3.文章和分类管理表中添加数据
            boolean finalResult = articleCategoryService.save(articleCategory);
            // 4.将结果返回给前端
            return AjaxResult.success(finalResult);
        }
        return AjaxResult.fail(-2, "未知错误！");
    }